Docker Run
	docker run hello-world

Overriding the default command
	docker run busybox echo hi there


List all running container
	docker ps

List all exited container
	docker ps --all


Docker command Run in details
	docker run = docker create + docker start

	docker create hello-world  (it returns container id)
	docker start hello-world  (logs are not attached to the screen )
	docker start -a hello-world (logs are attached to the screen)

Docker run in demon mode
	docker run -d <image_name>

Restarting stopped container
	docker ps -all (grab the container id which needs to be restarted)
	docker start -a <container_id>

Removing stopped container
	docker system prune


Retrieving log output
	docker logs <container_id>

Stopping containers
	stop command - waits for some time before killing the container
		docker stop <container_id>

	kill command - kills the container immediately
		docker kill <container_id>

Multi-command-container (images/programs which needs multiple commands for interaction)
	docker run redis

Executing command in running container
	docker exec -it <contianer_id> <command>

The purpose for -it in above command
	-i terminal attached to stdin channel of container
	-t format the o/p

Getting a command prompt in a container
	docker exec -it <contianer_id> sh
	docker exec -it <contianer_id> /bin/bash	

Starting container with shell
	docker run -it <image_name> sh (this will restrict the default command from running)

Container isolation
	Nothing is share between the container unless someone configures it manually

Building a dockerfile
	docke build .

Tagging an Image
	docker build -t dockerId/repoName:version .

Manual image generation from a container.
	docker commit -c 'CMD ["redis-server"]' <container_id>

Container port mapping
	docker run -p <port_of_host_machine>:<port_of_container> image_id

Docker Compose:
	This automatically takes care of the networking between the containers.

Run docker compose
	docker-compose up (this should always be run where docker-compose.yml file is available)

Rebuild images listed inside of docker-compose file
	docker-compose up --build 

Running container in demon mode from docker-compose file
	docker-compose up -d

Stopping containers started by docker-compose
	docker-compose down

Process.exit status codes
	0: We exited and everything is ok
	1,2,3, etc: We exited because something went wrong

Docker container restart policies inside of docker compose file:
	"no": Never attempts to restart this containerit it stops or crashes. (This is default, and should always be inside quotes as docker file treats no as false)
	always: If this container stops "for any reason" always attempt to restart it.
	on-failure: Only restart if the container stops with an error code.
	unless-stopped: Always restart unless we (the developer) forcibly stop it

Status of docker compose
	docker-compose ps (this should always be run where docker-compose.yml file is available)

Running a dockerfile with a custom file name
	docker build -f Dockerfile.dev -t dockerId/repoName:version .

Setup volumes
	docker run -p port_of_host_machine:port_of_container -v <host_path>:<container_path> <image_id>
	docker run -p 3000:3000 -v $(pwd):/app dockerId/repoName:version

	folder_inside_the_container_it_will_be_bookmarked: doesnot map with host path
	docker run -p port_of_host_machine:port_of_container -v <folder_inside_the_container_it_will_be_bookmarked> -v <host_path>:<container_path> <image_id>
	docker run -p port_of_host_machine:port_of_container -v <container_path> -v $(pwd):/app <image_id>